name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      refresh_mongo:
        description: 'Refresh MongoDB volume and deployment'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kube config
        run: aws eks update-kubeconfig --name fluffy-pet-cluster --region ap-south-1

      - name: Verify kubeconfig
        run: |
          kubectl config view
          kubectl config current-context
          kubectl cluster-info

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fluffy_pet_resource_management_system
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Refresh MongoDB Volume
        if: ${{ github.event.inputs.refresh_mongo == 'true' }}
        run: |
          kubectl delete pvc mongo-pvc --ignore-not-found
#          kubectl delete pv $(kubectl get pv -o jsonpath="{.items[?(@.spec.claimRef.name=='mongo-pvc')].metadata.name}") --ignore-not-found
          kubectl delete storageclass ebs-sc --ignore-not-found
          kubectl apply -f deployment/storage-class.yaml
          kubectl apply -f deployment/persistent-volume-claim.yaml

      - name: Create MongoDB Secret
        run: |
          kubectl delete secret mongo-secret --ignore-not-found
          kubectl apply -f deployment/mongo-app-secrets.yaml

      - name: Deploy MongoDB
        if: ${{ github.event.inputs.refresh_mongo == 'true' }}
        run: |
          kubectl apply --validate=false -f deployment/mongodb-deployment.yaml
          kubectl apply --validate=false -f deployment/mongodb-service.yaml

      - name: Deploy Mongo Express
        if: ${{ github.event.inputs.refresh_mongo == 'true' }}
        run: |
          kubectl apply --validate=false -f deployment/mongo-express-deployment.yaml
          kubectl apply --validate=false -f deployment/mongo-express-service.yaml

      - name: Deploy Application
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fluffy_pet_resource_management_system
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" deployment/deployment.yaml && \
          kubectl apply --validate=false -f deployment/deployment.yaml --v=8
          kubectl apply --validate=false -f deployment/service.yaml --v=8
